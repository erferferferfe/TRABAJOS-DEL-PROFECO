#include <iostream>
#include <vector>
using namespace std;

// Function to perform QuickSort on a vector between indices 'start' and 'end'
void quickSort(vector<int>& arr, int start, int end) {
    // Base case: if the segment has 1 or 0 elements, it's already sorted
    if (start >= end) return;

    // Choose the pivot as the middle element
    int pivot = arr[(start + end) / 2];

    // Initialize pointers for partitioning
    int i = start, j = end;

    // Partition the array: elements < pivot to the left, > pivot to the right
    while (i <= j) {
        // Move 'i' until finding an element >= pivot
        while (arr[i] < pivot) i++;
        // Move 'j' until finding an element <= pivot
        while (arr[j] > pivot) j--;
        // Swap elements if i hasn't crossed j
        if (i <= j) {
            swap(arr[i], arr[j]);
            i++;
            j--;
        }
    }

    // Recursively sort the left and right partitions
    quickSort(arr, start, j);
    quickSort(arr, i, end);
}

// Main function: entry point of the program
int main() {
    // Example array to sort
    vector<int> data = {8, 3, 1, 7, 0, 10, 2};

    cout << "Original array:" << endl;
    for (int x : data) cout << x << ", ";
    cout << endl;

    // Call QuickSort to sort the entire array
    quickSort(data, 0, data.size() - 1);

    cout << "\nSorted array:" << endl;
    for (int x : data) cout << x << ", ";
    cout << endl;

    return 0;
}